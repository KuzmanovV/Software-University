{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nexport class StorageService {\n  setItem(key, item) {\n    return item;\n  }\n\n  getItem(key) {\n    return null;\n  }\n\n}\nexport function storageFactory(platformId) {\n  if (isPlatformBrowser(platformId)) {\n    return new BrowserStorage();\n  }\n\n  if (isPlatformServer(platformId)) {\n    return new ServerStorage();\n  }\n\n  throw new Error('No implementation for this platform: ' + platformId);\n}\nexport const storageServiceProvider = {\n  provide: StorageService,\n  useFactory: storageFactory,\n  deps: [PLATFORM_ID]\n};\nexport class BrowserStorage {\n  constructor() {\n    this.localStorage = localStorage;\n  }\n\n  setItem(key, item) {\n    const str = typeof item === 'string' ? item : JSON.stringify(item);\n    this.localStorage.setItem(key, str);\n    return item;\n  }\n\n  getItem(key) {\n    let item;\n    const tmp = this.localStorage.getItem(key);\n\n    if (!tmp) {\n      return null;\n    }\n\n    try {\n      item = JSON.parse(tmp);\n    } catch (_a) {\n      item = tmp;\n    }\n\n    return item;\n  }\n\n}\nexport class ServerStorage {\n  constructor() {\n    this.localStorage = {\n      data: {},\n\n      setItem(key, item) {\n        this.data[key] = item;\n      },\n\n      getItem(key) {\n        return this.data[key];\n      }\n\n    };\n  }\n\n  setItem(key, item) {\n    this.localStorage.setItem(key, JSON.stringify(item));\n    return item;\n  }\n\n  getItem(key) {\n    let item;\n    const tmp = this.localStorage.getItem(key);\n\n    if (!tmp) {\n      return null;\n    }\n\n    try {\n      item = JSON.parse(tmp);\n    } catch (_a) {\n      item = tmp;\n    }\n\n    return item;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}