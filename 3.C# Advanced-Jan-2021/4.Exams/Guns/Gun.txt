//ParsingCharToInt
int bar = int.Parse(foo.ToString());

---------------------------------------------------------------------------------------------------
//Stack/Queue input

Queue<int> firstLootbox = new Queue<int>(Console.ReadLine().Split(" ",StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray());
Stack<int> secondLootbox = new Stack<int>(Console.ReadLine().Split(" ", StringSplitOptions.RemoveEmptyEntries).Select(int.Parse).ToArray());

Console.ReadLine().Split(", ").Select(int.Parse).ToArray();

--------------------------------------------------------------------------------------------------

//Printing Queue
for (int i = 0; i < plates.Count - 1; i++)
                {
                    Console.Write($"{plates.Dequeue()}, ");
                }
                Console.WriteLine(plates.Dequeue());
--------------------------------------------------------------------------------------------------
//Matrix input with Start fix and Barrow fix.

int size = int.Parse(Console.ReadLine());
char[,] matrix = new char[size,size];

int curRow = -1;
int curCol = -1;
int firstORow = -1;
int firstOCol = -1;
int secondORow = -1;
int secondOCol = -1;
for (int row = 0; row < size; row++)
{
	string currentRow = Console.ReadLine();
	for (int col = 0; col < currentRow.Length; col++)
	{
		matrix[row, col] = currentRow[col];

		if (matrix[row, col]=='S')
			{
			curRow = row;
			curCol = col;
			}
 		if (matrix[row, col] == 'O')
                  		  {
                      		  if (firstORow==-1)
                      		  {
                          		  firstORow = row;
                           		 firstOCol = col;
                        		}
                        		else
                       		 {
                         		 secondORow = row;
                          	 	 secondOCol = col;
                       		 }
                    }
	}
}


		OR		OR


string[] hits = Console.ReadLine().Split(",", StringSplitOptions.RemoveEmptyEntries).ToArray();
for (int row = 0; row < size; row++)
            {
                string[] currentRow = Console.ReadLine().Split(" ").ToArray();

                for (int col = 0; col < currentRow.Length; col++)
                {
                    matrix[row, col] = currentRow[col];
                }
            }
------------------------------------------------------------------------------------------------
//Printing matrix

for (int row = 0; row < matrix.GetLength(0); row++)
{
	for (int col = 0; col < matrix.GetLength(1); col++)
	{
		Console.Write(matrix[row,col]);
	}

	Console.WriteLine();
}

string input = Console.ReadLine();
while (input != "End")
{

	input = Console.ReadLine();
}

---------------------------------------------------------------------------------------------

//Printer
public static void Print(char[,] matrix)
        {
            for (int row = 0; row < matrix.GetLength(0); row++)
            {
                for (int col = 0; col < matrix.GetLength(1); col++)
                {
                    Console.Write(matrix[row, col]);
                }

                Console.WriteLine();
            }
        }

		

--------------------------------------------------------------------------------------------

//Verifying position
public static bool IsPositionValid(int row, int col, int rows, int cols)
{
	if (row < 0 || row >= rows)
	{
		return false;
	}
	if (col < 0 || col >= cols)
	{
		return false;
	}

	return true;
}

---------------------------------------------------------------------------------------------

//Moving position
public static int MoveRow(int row, string movement)
{
	if (movement == "up")
	{
		return row - 1;
	}
	if (movement == "down")
	{
		return row+1;
	}

	return row;
}

public static int MoveCol(int col, string movement)
{
	if (movement == "left")
	{
		return col - 1;
	}
	if (movement == "right")
	{
		return col + 1;
	}

	return col;
}

------------------------------------------------------------------------------------------------------------------

//StringBuilder
public string GetStatistics()
        {
            StringBuilder result = new StringBuilder();
            result.AppendLine("The clinic has the following patients:");

            foreach (var pet in data)
            {
                result.AppendLine($"Pet {pet.Name} with owner: {pet.Owner}");
            }

            return result.ToString();
        }